// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const addCartItem = `-- name: AddCartItem :exec
INSERT INTO cart_items (item_id, item_name, price, quantity) 
VALUES ($1, $2, $3, $4)
`

type AddCartItemParams struct {
	ItemID   int32
	ItemName string
	Price    float64
	Quantity int32
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.ExecContext(ctx, addCartItem,
		arg.ItemID,
		arg.ItemName,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const countUniqueItemsInCart = `-- name: CountUniqueItemsInCart :one
SELECT COUNT(DISTINCT item_id) AS unique_items
FROM cart_items
`

func (q *Queries) CountUniqueItemsInCart(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUniqueItemsInCart)
	var unique_items int64
	err := row.Scan(&unique_items)
	return unique_items, err
}

const findItemInCart = `-- name: FindItemInCart :one
SELECT EXISTS (
    SELECT 1
    FROM cart_items
    WHERE item_id = $1
)
`

func (q *Queries) FindItemInCart(ctx context.Context, itemID int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, findItemInCart, itemID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeItem = `-- name: RemoveItem :exec
DELETE FROM cart_items WHERE item_id = $1
`

func (q *Queries) RemoveItem(ctx context.Context, itemID int32) error {
	_, err := q.db.ExecContext(ctx, removeItem, itemID)
	return err
}
