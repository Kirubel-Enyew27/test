// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const addCartItem = `-- name: AddCartItem :exec
INSERT INTO cart_items (item_id, item_name, price, quantity) 
VALUES ($1, $2, $3, $4)
`

type AddCartItemParams struct {
	ItemID   int32
	ItemName string
	Price    float64
	Quantity int32
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) error {
	_, err := q.db.ExecContext(ctx, addCartItem,
		arg.ItemID,
		arg.ItemName,
		arg.Price,
		arg.Quantity,
	)
	return err
}

const addProduct = `-- name: AddProduct :exec
INSERT INTO products (product_id, product_name, price, stock)
VALUES ($1, $2, $3, $4)
`

type AddProductParams struct {
	ProductID   int32
	ProductName string
	Price       float64
	Stock       int32
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) error {
	_, err := q.db.ExecContext(ctx, addProduct,
		arg.ProductID,
		arg.ProductName,
		arg.Price,
		arg.Stock,
	)
	return err
}

const applyDiscountToCart = `-- name: ApplyDiscountToCart :exec
UPDATE cart_items
SET price = price - (price * $1 / 100)
WHERE price > 0
`

func (q *Queries) ApplyDiscountToCart(ctx context.Context, price float64) error {
	_, err := q.db.ExecContext(ctx, applyDiscountToCart, price)
	return err
}

const checkoutCart = `-- name: CheckoutCart :exec
DELETE FROM cart_items
`

func (q *Queries) CheckoutCart(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, checkoutCart)
	return err
}

const countUniqueItemsInCart = `-- name: CountUniqueItemsInCart :one
SELECT COUNT(DISTINCT item_id) AS unique_items
FROM cart_items
`

func (q *Queries) CountUniqueItemsInCart(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUniqueItemsInCart)
	var unique_items int64
	err := row.Scan(&unique_items)
	return unique_items, err
}

const findItemInCart = `-- name: FindItemInCart :one
SELECT EXISTS (
    SELECT 1
    FROM cart_items
    WHERE item_id = $1
)
`

func (q *Queries) FindItemInCart(ctx context.Context, itemID int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, findItemInCart, itemID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT product_id, product_name, price, stock
FROM products
WHERE product_id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, productID int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, productID)
	var i Product
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const removeAllItem = `-- name: RemoveAllItem :exec
DELETE FROM cart_items
`

func (q *Queries) RemoveAllItem(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllItem)
	return err
}

const removeItem = `-- name: RemoveItem :exec
DELETE FROM cart_items WHERE item_id = $1
`

func (q *Queries) RemoveItem(ctx context.Context, itemID int32) error {
	_, err := q.db.ExecContext(ctx, removeItem, itemID)
	return err
}

const updateItemQuantity = `-- name: UpdateItemQuantity :exec
UPDATE cart_items
SET quantity = $2
WHERE item_id = $1
`

type UpdateItemQuantityParams struct {
	ItemID   int32
	Quantity int32
}

func (q *Queries) UpdateItemQuantity(ctx context.Context, arg UpdateItemQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateItemQuantity, arg.ItemID, arg.Quantity)
	return err
}

const updateProductStock = `-- name: UpdateProductStock :exec
UPDATE products
SET stock = $2
WHERE product_id = $1
`

type UpdateProductStockParams struct {
	ProductID int32
	Stock     int32
}

func (q *Queries) UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) error {
	_, err := q.db.ExecContext(ctx, updateProductStock, arg.ProductID, arg.Stock)
	return err
}

const viewCart = `-- name: ViewCart :many
SELECT item_id, item_name, price, quantity
FROM cart_items
`

func (q *Queries) ViewCart(ctx context.Context) ([]CartItem, error) {
	rows, err := q.db.QueryContext(ctx, viewCart)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CartItem
	for rows.Next() {
		var i CartItem
		if err := rows.Scan(
			&i.ItemID,
			&i.ItemName,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
